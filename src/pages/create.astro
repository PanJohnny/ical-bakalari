---
import Layout from "../layouts/Layout.astro";
import {storeCredentials} from "../util/db";
const SECRET_KEY = import.meta.env.TURNSTILE_SECRET;
export const prerender = false;

async function validateTurnstile(token: any, remoteip: any) {
    const formData = new FormData();
    formData.append('secret', SECRET_KEY);
    formData.append('response', token);
    formData.append('remoteip', remoteip);

    try {
        const response = await fetch('https://challenges.cloudflare.com/turnstile/v0/siteverify', {
            method: 'POST',
            body: formData
        });

        return await response.json();
    } catch (error) {
        console.error('Turnstile validation error:', error);
        return {success: false, 'error-codes': ['internal-error']};
    }
}

async function login(schoolUrl: any, username: any, password: any) {
    return await fetch(schoolUrl + "/api/login", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `client_id=ANDR&grant_type=password&username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`
    }).then(res => res.json());
}

const body = await Astro.request.formData();
const token = body.get('cf-turnstile-response');
const ip = Astro.request.headers.get('CF-Connecting-IP') ||
    Astro.request.headers.get('X-Forwarded-For') ||
    'unknown';

const validation = await validateTurnstile(token, ip);

let icalId;
let alreadyExists;
let key;

if (validation.success) {
    // Token is valid - proceed with form submission handling
    let url = body.get('url');
    const username = body.get('username');
    const password = body.get('password');

    // attempt to login to bakalari
    if (!url || !username || !password) {
        return Astro.redirect('/?error=missing-fields');
    }

    if (url.endsWith("/")) {
        url = url.slice(0, -1);
    }

    try {
        new URL(url as string);
    } catch (e) {
        return Astro.redirect('/?error=invalid-url');
    }

    try {
        let loginData = await login(url, username, password);
        if (loginData.error) {
            return Astro.redirect("/?error=login");
        }

        // store credentials
        const credentials = {
            schoolUrl: url,
            accessToken: loginData.access_token,
            refreshToken: loginData.refresh_token,
            tokenExpiresAt: (Date.now() + (loginData.expires_in * 1000)).toString()
        };

        let {
            id,
            alreadyCreated,
            aesKey
        } = await storeCredentials(credentials, username + "+" + loginData["bak:UserId"] + "@" + url, password);
        icalId = id;
        alreadyExists = alreadyCreated;
        key = aesKey;
    } catch (e) {
        console.error(e);
        return Astro.redirect("/?error=fail");
    }
} else {
    // Token is invalid - reject the submission
    console.log('Invalid token:', validation['error-codes']);
    return Astro.redirect('/?error=turnstile');
}

const iCal = Astro.url.protocol + "//" + Astro.url.host + "/ical/" + icalId + "?key=" + encodeURIComponent(key);
---

<Layout>
    <main class="container">
        {!alreadyExists ? <h1>iCal link created</h1> : <h1>iCal link already exists</h1>}
        <p>You can now subscribe to the link with your calendar application.</p>
        <p>Your iCal link will expire on the nearest 31st of july.</p>
        <p>Your iCal link is <code>{iCal}</code></p>
        <button type="button" id="copy">Click here to copy</button>
        <p class="note">Never share this link with anybody as it contains the key used to encrypt your credentials. A bad actor with the access to our backend could be able to compromise your account!</p>
        <form action="/delete" method="post" onsubmit="return confirm('Are you sure you want to delete your iCal link and all associated data? This action cannot be undone.')">
            <input type="hidden" name="hash" value={icalId}/>
            <input type="submit" value="Delete iCal link and all associated data" style="background-color: #d66c13"/>
        </form>
    </main>
</Layout>

<script define:vars={{iCal}}>
    document.querySelector("#copy").addEventListener("click", (event) => {
        navigator.clipboard.writeText(iCal);
        event.target.innerText = "Copied!";
        setTimeout(() => {
            event.target.innerText = "Click here to copy";
        }, 1000);
    });
</script>