---
import Layout from '../layouts/Layout.astro';
import Turnstile from "../components/Turnstile.astro";
---

<Layout>
    <main class="container">
        <h1>Connect Bakaláři to your calendar</h1>
        <div class="message">

        </div>
        <h2>Login to your account</h2>
        <form action="/create" method="post">
            <label>
                School Bakaláři URL
                <input type="url" name="url" placeholder="https://something.bakalari.cz/bakaweb" required
                       autocomplete="on" autofocus/>
            </label>
            <button type="button" id="search-school" style="background-color: #d66c13">I don't know the URL</button>
            <label>
                Username
                <input type="text" name="username" placeholder="Username" required/>
            </label>
            <label>
                Password
                <input type="password" name="password" placeholder="********" required/>
            </label>
            <label class="line-flex">
                <input type="checkbox" required/><span>I agree to <a href="/policy" target="_blank" rel="noopener">the iCal Feed Credential Management Policy</a> and understand the risks of using this service.</span>
            </label>

            <Turnstile/>
            <small style="text-align: center">
                <a href="/revoke">
                    Don't remember your credentials, or have they changed? Revoke access here.
                </a>
            </small>
            <input type="submit" value="Login"></input>
            <div class="note">
                Make sure you trust the website hosting this service before using it.
            </div>
        </form>
    </main>

    <dialog id="search-dialog">
        <form method="dialog">
            <h2>Search for your school</h2>
            <p>Start typing the name of your municipality and select it from the list. Then select your school.</p>
            <label>
                Municipality
                <input type="search" id="municipality" placeholder="Type to search..." autocomplete="off" required/>
            </label>
            <label>
                School
                <input type="search" id="school-name" placeholder="Select a municipality first..." autocomplete="off"
                       disabled required/>
            </label>
            <button type="submit">Close</button>
        </form>
    </dialog>
</Layout>

<style is:global>
    .message {
        margin-bottom: 1rem;
    }
    .error {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 4px;
        border: 1px solid #f5c6cb;
    }
    .success {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 4px;
        border: 1px solid #c3e6cb;
    }
</style>
<script>
    let municipalities: [{ name: string, schoolCount: number }];
    document.getElementById("search-school")?.addEventListener("click", () => {
        if (!municipalities) {
            fetch("/api/municipality", {
                headers: {
                    "Accept": "application/json"
                }
            }).then(res => res.json()).then(data => {
                municipalities = data;
                // load municipalities into a datalist for the search field
                const municipalityInput = document.getElementById("municipality") as HTMLInputElement;
                const datalist = document.createElement("datalist");
                datalist.id = "municipality-list";
                for (const municipality of municipalities) {
                    const option = document.createElement("option");
                    option.value = municipality.name;
                    option.label = `${municipality.name} (${municipality.schoolCount} schools)`;
                    datalist.appendChild(option);
                }
                municipalityInput.setAttribute("list", "municipality-list");
                document.body.appendChild(datalist);

                // when user selects a municipality, search for schools
                municipalityInput.addEventListener("input", () => {
                    const selected = municipalities.find(m => m.name === municipalityInput.value);
                    if (selected) {
                        fetch(`/api/municipality/${encodeURIComponent(selected.name)}`, {
                            headers: {
                                "Accept": "application/json"
                            }
                        }).then(res => res.json()).then(data => {
                            const schools = data.schools;
                            const schoolInput = document.getElementById("school-name") as HTMLInputElement;
                            schoolInput.disabled = false;

                            const schoolDatalist = document.createElement("datalist");
                            schoolDatalist.id = "school-list";
                            schoolInput.setAttribute("list", "school-list");
                            schoolInput.placeholder = "Start typing to search...";
                            schoolDatalist.innerHTML = schools.map((s: any) =>
                                `<option value="${s.name}" label="${s.name} (${s.schoolUrl})"></option>`
                            ).join("");
                            document.body.appendChild(schoolDatalist);
                            schoolInput.focus();
                            schoolInput.addEventListener("input", () => {
                                const selectedSchool = schools.find((s: any) => s.name === schoolInput.value);
                                if (selectedSchool) {
                                    const urlInput = document.querySelector("input[name=url]") as HTMLInputElement;
                                    urlInput.value = selectedSchool.schoolUrl;
                                    const dialog = document.getElementById("search-dialog") as HTMLDialogElement;
                                    dialog.close();
                                }
                            });
                        });
                    }
                });

                openDialog();
            });
        } else {
            openDialog();
        }
    });

    function openDialog() {
        const dialog = document.getElementById("search-dialog") as HTMLDialogElement;
        dialog.showModal();
    }

    // check query parameters for error messages
    const params = new URLSearchParams(window.location.search);
    const messageDiv = document.querySelector(".message") as HTMLDivElement;
    if (params.has("error")) {
        let message: string;
        switch (params.get("error")) {
            case "missing-fields":
                message = "Please fill in all required fields.";
                break;
            case "invalid-url":
                message = "The provided school URL is not valid.";
                break;
            case "login":
                message = "Failed to login. Please check your credentials and try again.";
                break;
            case "captcha":
                message = "Captcha validation failed. Please try again.";
                break;
            case "internal":
                message = "An internal error occurred. Please try again later.";
                break;
            default:
                message = "An unknown error occurred. Please try again.";
        }
        messageDiv.innerHTML = `<div class="error">${message}</div>`;
    }

    if (params.has("deleted")) {
        let message = "";
        switch (params.get("deleted")) {
            case "true":
                message = "Your credentials have been successfully deleted.";
                messageDiv.innerHTML = `<div class="success">${message}</div>`;
                break;
            case "error":
                message = "Failed to delete your credentials. They may have already been deleted.";
                messageDiv.innerHTML = `<div class="error">${message}</div>`;
                break;
            case "false":
                message = "No credentials found for the provided identifier.";
                messageDiv.innerHTML = `<div class="error">${message}</div>`;
                break;
        }
    }
</script>